{
  "usageOfTrueBranchContainingSingleSkipStatement": {
    "inputCircuit": "module main(inout a(4)) if (a > 2) then skip else ++= a fi (a > 2)",
    "expectedCircuit": "module main(inout a(4)) if (a[0] > 2) then skip else ++= a[0] fi (a[0] > 2)"
  },
  "usageOfFalseBranchContainingSingleSkipStatement": {
    "inputCircuit": "module main(inout a(4)) if (a > 2) then --= a else skip fi (a > 2)",
    "expectedCircuit": "module main(inout a(4)) if (a[0] > 2) then --= a[0] else skip fi (a[0] > 2)"
  },
  "usageOfIntegerConstantAsGuardConditionExpression": {
    "inputCircuit": "module main(inout a(4)) if 2 then --= a else ++= a fi 2",
    "expectedCircuit": "module main(inout a(4)) if 2 then --= a[0] else ++= a[0] fi 2"
  },
  "usageOfConstantExpressionEvaluableAtCompileTimeAsGuardConditionExpression": {
    "inputCircuit": "module main(inout a(4)) if ((2 + 1) * #a) then --= a else ++= a fi ((2 + 1) * #a)",
    "expectedCircuit": "module main(inout a(4)) if 12 then --= a[0] else ++= a[0] fi 12"
  },
  "usageOfConstantExpressionNotEvaluableAtCompileTimeAsGuardConditionExpression": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do if ((2 + 1) * $i) then --= a else ++= a fi ((2 + 1) * $i) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do if (3 * $i) then --= a[0] else ++= a[0] fi (3 * $i) rof"
  },
  "usageOfVariableAccessAsGuardConditionExpression": {
    "inputCircuit": "module main(inout a(4)) if a[0].2 then ++= a else --= a fi a[0].2",
    "expectedCircuit": "module main(inout a(4)) if a[0].2 then ++= a[0] else --= a[0] fi a[0].2"
  },
  "usageOfBinaryExpressionAsGuardConditionExpression": {
    "inputCircuit": "module main(inout a(4)) if (a != #a) then ++= a else --= a fi (a != #a)",
    "expectedCircuit": "module main(inout a(4)) if (a[0] != 4) then ++= a[0] else --= a[0] fi (a[0] != 4)"
  },
  "usageOfShiftExpressionAsGuardConditionExpression": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 do if (a << $i) then ++= a else --= a fi (a << $i) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do if (a[0] << $i) then ++= a[0] else --= a[0] fi (a[0] << $i) rof"
  },
  "usageOfMultipleStatementsInTrueBranch": {
    "inputCircuit": "module main(inout a(4)) if a then ++= a; if (a > 2) then --= a; skip else a += (2 + #a) fi (a > 2); --= a else a += 1 fi a",
    "expectedCircuit": "module main(inout a(4)) if a[0] then ++= a[0]; if (a[0] > 2) then --= a[0]; skip else a[0] += 6 fi (a[0] > 2); --= a[0] else a[0] += 1 fi a[0]"
  },
  "usageOfMultipleStatementsInFalseBranch": {
    "inputCircuit": "module main(inout a(4)) if a then a += 1 else ++= a; if (a > 2) then --= a; skip else a += (2 + #a) fi (a > 2) fi a",
    "expectedCircuit": "module main(inout a(4)) if a[0] then a[0] += 1 else ++= a[0]; if (a[0] > 2) then --= a[0]; skip else a[0] += 6 fi (a[0] > 2) fi a[0]"
  }
}