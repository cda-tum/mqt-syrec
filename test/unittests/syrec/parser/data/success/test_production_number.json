{
  "evaluationOfAdditionOperationInConstantExpressionPerformed": {
    "inputCircuit": "module main(inout a(4), in b(1)) a.(#b + 2) += 1",
    "expectedCircuit": "module main(inout a(4), in b(1)) a[0].3 += 1"
  },
  "evaluationOfSubtractionOperationInConstantExpressionPerformed": {
    "inputCircuit": "module main(inout a(4)) a.(#a - 2) += 1",
    "expectedCircuit": "module main(inout a(4)) a[0].2 += 1"
  },
  "evaluationOfMultiplicationOperationInConstantExpressionPerformed": {
    "inputCircuit": "module main(inout a(4), in b(1)) a.(#b * 2) += 1",
    "expectedCircuit": "module main(inout a(4), in b(1)) a[0].2 += 1"
  },
  "evaluationOfDivisionOperationInConstantExpressionPerformed": {
    "inputCircuit": "module main(inout a(4), in b(1)) a.(#b / 2) += 1",
    "expectedCircuit": "module main(inout a(4), in b(1)) a[0].0 += 1"
  },
  "simplificationOfMultiplicationInConstantExpressionPerformedIfOneOperandIsZero": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a.(($i + 2) * 0) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a[0].0 rof"
  },
  "simplificationOfAdditionInConstantExpressionPerformedIfLhsOperandIsZero": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a.(0 + ($i + 2)) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a[0].($i + 2) rof"
  },
  "simplificationOfAdditionInConstantExpressionPerformedIfRhsOperandIsZero": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a.(($i + 2) + 0) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a[0].($i + 2) rof"
  },
  "simplificationOfSubtractionInConstantExpressionPerformedIfRhsOperandIsZero": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a.(($i + 2) - 0) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a[0].($i + 2) rof"
  },
  "simplificationOfMultiplicationInConstantExpressionPerformedIfOneOperandIsOne": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a.(($i + 2) * 1) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a[0].($i + 2) rof"
  },
  "simplificationOfDivisionInConstantExpressionPerformedIfOneOperandIsOne": {
    "inputCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a.(($i + 2) / 1) rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 0 to 3 step 1 do ++= a[0].($i + 2) rof"
  },
  "simplificationOfNestedConstantExpressionSubexpressionPerformedAndPropagated": {
    "inputCircuit": "module main(inout a(4), in b(4)) for $i = 0 to 3 do a.((3 - (#b - 2)) * $i) += b.1 rof",
    "expectedCircuit": "module main(inout a(4), in b(4)) for $i = 0 to 3 step 1 do a[0].$i += b[0].1 rof"
  },
  "simplificationInNestedConstantExpressionNotDroppedDueToParentExpressionNotAllowingSimplification": {
    "inputCircuit": "module main(inout a(4), in b(4)) for $i = 0 to 3 step 1 do a += (($i - (#b - 2)) * b) rof",
    "expectedCircuit": "module main(inout a(4), in b(4)) for $i = 0 to 3 step 1 do a[0] += (($i - 2) * b[0]) rof"
  }
}
