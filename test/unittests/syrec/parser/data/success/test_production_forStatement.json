{
  "usageOfLoopWithOnlyEndValueDefined": {
    "inputCircuit": "module main(inout a(4)) for 3 do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for 0 to 3 step 1 do ++= a[0] rof"
  },
  "usageOfLoopWithEndValueAndStepsizeDefined": {
    "inputCircuit": "module main(inout a(4)) for 3 step 2 do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for 0 to 3 step 2 do ++= a[0] rof"
  },
  "usageOfLoopWithoutLoopVariableButStartAndEndValueDefined": {
    "inputCircuit": "module main(inout a(4)) for 1 to 3 step 2 do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for 1 to 3 step 2 do ++= a[0] rof"
  },
  "usageOfLoopWithoutLoopVariableAndEndValueDefined": {
    "inputCircuit": "module main(inout a(4)) for 1 to 3 do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for 1 to 3 step 1 do ++= a[0] rof"
  },
  "usageOfLoopWithLoopVariableAndEndValueDefined": {
    "inputCircuit": "module main(inout a(4)) for $i = 1 to 3 do ++= a.$i rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 1 to 3 step 1 do ++= a[0].$i rof"
  },
  "usageOfLoopWithLoopVariableAndFullyDefinedIterationRangeBounds": {
    "inputCircuit": "module main(inout a(4)) for $i = 1 to 3 step 2 do ++= a.$i rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 1 to 3 step 2 do ++= a[0].$i rof"
  },
  "usageOfLoopVariableOfOwnLoopInEndValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for $i = 1 to ($i + 1) do ++= a.$i rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 1 to ($i + 1) step 1 do ++= a[0].$i rof"
  },
  "usageOfLoopVariableOfOwnLoopInValueOfStepsizeDefinition": {
    "inputCircuit": "module main(inout a(4)) for $i = 1 to 3 step ($i + 1) do ++= a.$i rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 1 to 3 step ($i + 1) do ++= a[0].$i rof"
  },
  "usageOfNegativeStepsize": {
    "inputCircuit": "module main(inout a(4)) for $i = 3 to 1 step -1 do ++= a.$i rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 3 to 1 step 4294967295 do ++= a[0].$i rof"
  },
  "usageOfLoopVariableOfParentLoopInStartValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for $j = 0 to 3 do for ($j + 1) to 1 step 1 do ++= a.$j rof rof",
    "expectedCircuit": "module main(inout a(4)) for $j = 0 to 3 step 1 do for ($j + 1) to 1 step 1 do ++= a[0].$j rof rof"
  },
  "usageOfLoopVariableOfParentLoopInLoopVariableStartValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for $j = 0 to 3 do for $i = ($j + 1) to 1 step 1 do ++= a.$i rof rof",
    "expectedCircuit": "module main(inout a(4)) for $j = 0 to 3 step 1 do for $i = ($j + 1) to 1 step 1 do ++= a[0].$i rof rof"
  },
  "usageOfLoopVariableOfParentLoopInEndValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for $j = 0 to 3 do for ($j + 1) do ++= a.$j rof rof",
    "expectedCircuit": "module main(inout a(4)) for $j = 0 to 3 step 1 do for 0 to ($j + 1) step 1 do ++= a[0].$j rof rof"
  },
  "usageOfLoopVariableOfParentLoopInStepsizeValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for $j = 0 to 3 do for 3 to 1 step ($j - 1) do ++= a.$j rof rof",
    "expectedCircuit": "module main(inout a(4)) for $j = 0 to 3 step 1 do for 3 to 1 step ($j - 1) do ++= a[0].$j rof rof"
  },
  "evaluationOfConstantExpressionInStartValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for (#a - 2) to 3 do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for 2 to 3 step 1 do ++= a[0] rof"
  },
  "evaluationOfConstantExpressionInLoopVariableStartValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for $i = (#a - 2) to 3 do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for $i = 2 to 3 step 1 do ++= a[0] rof"
  },
  "evaluationOfConstantExpressionInEndValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for (#a - 2) do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for 0 to 2 step 1 do ++= a[0] rof"
  },
  "evaluationOfConstantExpressionInStepsizeValueDefinition": {
    "inputCircuit": "module main(inout a(4)) for 2 step (#a - 2) do ++= a rof",
    "expectedCircuit": "module main(inout a(4)) for 0 to 2 step 2 do ++= a[0] rof"
  },
  "usageOfMultipleStatementsInLoopBody": {
    "inputCircuit": "module main(inout a(4)) for 2 do ++= a; if (a > 2) then --= a else ++= a fi (a > 2); --= a rof",
    "expectedCircuit": "module main(inout a(4)) for 0 to 2 step 1 do ++= a[0]; if (a[0] > 2) then --= a[0] else ++= a[0] fi (a[0] > 2); --= a[0] rof"
  }
}